#!/bin/bash

# Script kh·ªüi ƒë·ªông development environment cho System Checklist Tool
# Ch·∫°y c·∫£ backend v√† frontend ƒë·ªìng th·ªùi

echo "üöÄ Starting System Checklist Tool Development Environment..."
echo "================================================"

# Chuy·ªÉn v·ªÅ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n (parent directory c·ªßa scripts)
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"
cd "$PROJECT_ROOT"

# Ki·ªÉm tra xem c√≥ ƒëang trong th∆∞ m·ª•c d·ª± √°n kh√¥ng
if [ ! -f "package.json" ] && [ ! -f "backend/app.py" ]; then
    echo "‚ùå Error: Cannot find project files. Please check project structure."
    echo "Current directory: $(pwd)"
    exit 1
fi

# Function ƒë·ªÉ cleanup khi script b·ªã d·ª´ng
cleanup() {
    echo "\nüõë Stopping all services..."
    kill $BACKEND_PID $FRONTEND_PID $REDIS_PID $WORKER_PID 2>/dev/null
    wait $BACKEND_PID $FRONTEND_PID $REDIS_PID $WORKER_PID 2>/dev/null
    echo "‚úÖ All services stopped"
    exit 0
}

# Trap SIGINT (Ctrl+C) ƒë·ªÉ cleanup
trap cleanup SIGINT

# Ki·ªÉm tra Python v√† Node.js
echo "üîç Checking dependencies..."

if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 is not installed"
    exit 1
fi

if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js is not installed"
    exit 1
fi

if ! command -v npm &> /dev/null; then
    echo "‚ùå npm is not installed"
    exit 1
fi

echo "‚úÖ Dependencies check passed"

# Ki·ªÉm tra v√† c√†i ƒë·∫∑t Redis
echo "\nüîç Checking Redis..."
if ! command -v redis-server &> /dev/null; then
    echo "üì¶ Redis not found. Installing Redis..."
    
    # C√†i ƒë·∫∑t Redis b·∫±ng snap (kh√¥ng c·∫ßn sudo)
    if command -v snap &> /dev/null; then
        echo "Installing Redis via snap..."
        sudo apt install redis -y
    else
        echo "‚ö†Ô∏è  Redis not installed and snap not available."
        echo "Please install Redis manually:"
        echo "  sudo apt update && sudo apt install redis-server -y"
        echo "Or install snap first:"
        echo "  sudo apt install snapd -y"
        echo ""
        echo "Continuing without Redis (RQ features will be disabled)..."
        export DISABLE_RQ=true
    fi
else
    echo "‚úÖ Redis is available"
fi

# Kh·ªüi ƒë·ªông Redis Server
if [ "$DISABLE_RQ" != "true" ] && command -v redis-server &> /dev/null; then
    echo "\nüî¥ Starting Redis Server..."
    
    # Ki·ªÉm tra xem Redis ƒë√£ ch·∫°y ch∆∞a
    if redis-cli ping &> /dev/null; then
        echo "‚úÖ Redis is already running"
    else
        # Kh·ªüi ƒë·ªông Redis server
        redis-server --daemonize yes --port 6379 --bind 127.0.0.1
        sleep 2
        
        # Ki·ªÉm tra Redis ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng ch∆∞a
        if redis-cli ping &> /dev/null; then
            echo "‚úÖ Redis server started successfully"
        else
            echo "‚ö†Ô∏è  Failed to start Redis server"
            echo "Continuing without Redis (RQ features will be disabled)..."
            export DISABLE_RQ=true
        fi
    fi
else
    echo "‚ö†Ô∏è  Redis not available, RQ features will be disabled"
    export DISABLE_RQ=true
fi

# Kh·ªüi ƒë·ªông Backend
echo "\nüêç Starting Backend (Flask)..."
cd "$PROJECT_ROOT/backend"

# Ki·ªÉm tra virtual environment
if [ ! -d "venv" ]; then
    echo "üì¶ Creating virtual environment..."
    python3 -m venv venv
fi

# Activate virtual environment
source venv/bin/activate

# Install dependencies n·∫øu c·∫ßn
if [ ! -f "venv/.deps_installed" ]; then
    echo "üì¶ Installing Python dependencies..."
    pip install -r requirements.txt
    touch venv/.deps_installed
fi

# Kh·ªüi ƒë·ªông Flask server
echo "üåê Starting Flask server on http://localhost:5000"
export FLASK_ENV=development
export FLASK_DEBUG=1
python3 app.py &
BACKEND_PID=$!

# Kh·ªüi ƒë·ªông RQ Worker
if [ "$DISABLE_RQ" != "true" ]; then
    echo "\nüë∑ Starting RQ Worker..."
    python3 run_worker.py &
    WORKER_PID=$!
    echo "‚úÖ RQ Worker started (PID: $WORKER_PID)"
else
    echo "‚ö†Ô∏è  RQ Worker disabled"
    WORKER_PID=""
fi

# Kh·ªüi ƒë·ªông Frontend
echo "\n‚öõÔ∏è  Starting Frontend (React)..."
cd "$PROJECT_ROOT/frontend"

# Install dependencies n·∫øu c·∫ßn
if [ ! -d "node_modules" ]; then
    echo "üì¶ Installing Node.js dependencies..."
    npm install
fi

# Kh·ªüi ƒë·ªông React development server
echo "üåê Starting React server on http://localhost:5173"
npm run dev &
FRONTEND_PID=$!

# Quay v·ªÅ th∆∞ m·ª•c g·ªëc
cd "$PROJECT_ROOT"

# Ch·ªù m·ªôt ch√∫t ƒë·ªÉ servers kh·ªüi ƒë·ªông
echo "\n‚è≥ Waiting for servers to start..."
sleep 5

# Hi·ªÉn th·ªã th√¥ng tin
echo "\nüéâ Development environment is ready!"
echo "================================================"
echo "üì± Frontend (React):  http://localhost:5173"
echo "üîß Backend (Flask):   http://localhost:5000"
echo "üìä API Endpoints:     http://localhost:5000/api"
if [ "$DISABLE_RQ" != "true" ]; then
    echo "üî¥ Redis Server:      localhost:6379"
    echo "üë∑ RQ Worker:         Running"
else
    echo "‚ö†Ô∏è  Redis:             Disabled (RQ features unavailable)"
    echo "‚ö†Ô∏è  RQ Worker:         Disabled"
fi
echo "================================================"
echo "\nüí° Tips:"
echo "   - Frontend s·∫Ω t·ª± ƒë·ªông reload khi b·∫°n thay ƒë·ªïi code"
echo "   - Backend c≈©ng s·∫Ω reload v·ªõi Flask debug mode"
echo "   - Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng t·∫•t c·∫£ services"
echo "\nüîç Checking server status..."

# Ki·ªÉm tra backend
if curl -s http://localhost:5000/api/health > /dev/null; then
    echo "‚úÖ Backend is running"
else
    echo "‚ö†Ô∏è  Backend might still be starting..."
fi

# Ki·ªÉm tra frontend
if curl -s http://localhost:5173 > /dev/null; then
    echo "‚úÖ Frontend is running"
else
    echo "‚ö†Ô∏è  Frontend might still be starting..."
fi

# Ki·ªÉm tra Redis
if [ "$DISABLE_RQ" != "true" ]; then
    if redis-cli ping &> /dev/null; then
        echo "‚úÖ Redis is running"
    else
        echo "‚ö†Ô∏è  Redis might have issues..."
    fi
    
    # Ki·ªÉm tra RQ Worker
    if ps -p $WORKER_PID &> /dev/null; then
        echo "‚úÖ RQ Worker is running"
    else
        echo "‚ö†Ô∏è  RQ Worker might have issues..."
    fi
fi

echo "\nüöÄ Ready for development! Press Ctrl+C to stop all services."

# Ch·ªù cho ƒë·∫øn khi user nh·∫•n Ctrl+C
if [ "$DISABLE_RQ" != "true" ] && [ -n "$WORKER_PID" ]; then
    wait $BACKEND_PID $FRONTEND_PID $WORKER_PID
else
    wait $BACKEND_PID $FRONTEND_PID
fi