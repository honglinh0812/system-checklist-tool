"""Update MOP status to use enum with pending and approved only

Revision ID: db9faf5c07f7
Revises: 0ee26b6e4a3d
Create Date: 2025-08-13 16:11:32.407854

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'db9faf5c07f7'
down_revision = '0ee26b6e4a3d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create the enum type
    mopstatus_enum = sa.Enum('pending', 'approved', name='mopstatus')
    mopstatus_enum.create(op.get_bind())
    
    # Update existing data to match new enum values
    op.execute("UPDATE mops SET status = 'pending' WHERE status IN ('PENDING', 'PENDING_APPROVAL', 'draft')")
    op.execute("UPDATE mops SET status = 'approved' WHERE status IN ('APPROVED', 'approved')")
    op.execute("UPDATE mops SET status = 'pending' WHERE status NOT IN ('pending', 'approved')")
    
    # Alter column type with USING clause
    op.execute('ALTER TABLE mops ALTER COLUMN status TYPE mopstatus USING status::mopstatus')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('mops', schema=None) as batch_op:
        batch_op.alter_column('status',
               existing_type=sa.Enum('pending', 'approved', name='mopstatus'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    
    # Drop the enum type
    sa.Enum(name='mopstatus').drop(op.get_bind())

    # ### end Alembic commands ###
