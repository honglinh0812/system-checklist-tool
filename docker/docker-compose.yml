services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: system-checklist-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-system_checklist}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-system_checklist}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: system-checklist-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: docker/backend/Dockerfile
    container_name: system-checklist-backend
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@database:5432/${POSTGRES_DB:-system_checklist}
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      
      # Flask configuration
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_APP: app.py
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      
      # JWT configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key-change-in-production}
      JWT_ACCESS_TOKEN_EXPIRES: ${JWT_ACCESS_TOKEN_EXPIRES:-3600}
      JWT_REFRESH_TOKEN_EXPIRES: ${JWT_REFRESH_TOKEN_EXPIRES:-2592000}
      
      # Application settings
      UPLOAD_FOLDER: ${UPLOAD_FOLDER:-/app/uploads}
      MAX_CONTENT_LENGTH: ${MAX_CONTENT_LENGTH:-16777216}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Ansible settings
      ANSIBLE_HOST_KEY_CHECKING: False
      ANSIBLE_SSH_RETRIES: 3
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_tmp:/app/tmp
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker-in-Docker if needed
    ports:
      - "5000:5000"
    networks:
      - app-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ..
      dockerfile: docker/frontend/Dockerfile
    container_name: system-checklist-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx Reverse Proxy (optional - for production)
  nginx-proxy:
    image: nginx:alpine
    container_name: system-checklist-proxy
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  backend_tmp:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
